from __future__ import annotations

from coredis.commands.constants import CommandName
from coredis.tokens import PrefixToken
from coredis.typing import Callable, Dict, Tuple, ValueT

READONLY: Dict[CommandName, Callable[[Tuple[ValueT, ...]], Tuple[ValueT, ...]]] = {
    CommandName.BITCOUNT: lambda args: (args[1],),
    CommandName.BITFIELD_RO: lambda args: (args[1],),
    CommandName.BITOP: lambda args: args[3 : (len(args))],
    CommandName.BITPOS: lambda args: (args[1],),
    CommandName.COPY: lambda args: (args[1],),
    CommandName.DUMP: lambda args: (args[1],),
    CommandName.EVALSHA_RO: lambda args: args[3 : 3 + int(args[2])],
    CommandName.EVAL_RO: lambda args: args[3 : 3 + int(args[2])],
    CommandName.EXISTS: lambda args: args[1 : (len(args))],
    CommandName.EXPIRETIME: lambda args: (args[1],),
    CommandName.FCALL_RO: lambda args: args[3 : 3 + int(args[2])],
    CommandName.GEODIST: lambda args: (args[1],),
    CommandName.GEOHASH: lambda args: (args[1],),
    CommandName.GEOPOS: lambda args: (args[1],),
    CommandName.GEORADIUS: lambda args: (args[1],),
    CommandName.GEORADIUSBYMEMBER: lambda args: (args[1],),
    CommandName.GEORADIUSBYMEMBER_RO: lambda args: (args[1],),
    CommandName.GEORADIUS_RO: lambda args: (args[1],),
    CommandName.GEOSEARCH: lambda args: (args[1],),
    CommandName.GEOSEARCHSTORE: lambda args: (args[2],),
    CommandName.GET: lambda args: (args[1],),
    CommandName.GETBIT: lambda args: (args[1],),
    CommandName.GETRANGE: lambda args: (args[1],),
    CommandName.HEXISTS: lambda args: (args[1],),
    CommandName.HGET: lambda args: (args[1],),
    CommandName.HGETALL: lambda args: (args[1],),
    CommandName.HKEYS: lambda args: (args[1],),
    CommandName.HLEN: lambda args: (args[1],),
    CommandName.HMGET: lambda args: (args[1],),
    CommandName.HRANDFIELD: lambda args: (args[1],),
    CommandName.HSCAN: lambda args: (args[1],),
    CommandName.HSTRLEN: lambda args: (args[1],),
    CommandName.HVALS: lambda args: (args[1],),
    CommandName.LCS: lambda args: args[1:2],
    CommandName.LINDEX: lambda args: (args[1],),
    CommandName.LLEN: lambda args: (args[1],),
    CommandName.LPOS: lambda args: (args[1],),
    CommandName.LRANGE: lambda args: (args[1],),
    CommandName.MEMORY_USAGE: lambda args: (args[1],),
    CommandName.MGET: lambda args: args[1 : (len(args))],
    CommandName.OBJECT_ENCODING: lambda args: (args[1],),
    CommandName.OBJECT_FREQ: lambda args: (args[1],),
    CommandName.OBJECT_IDLETIME: lambda args: (args[1],),
    CommandName.OBJECT_REFCOUNT: lambda args: (args[1],),
    CommandName.PEXPIRETIME: lambda args: (args[1],),
    CommandName.PFMERGE: lambda args: args[2 : (len(args))],
    CommandName.PTTL: lambda args: (args[1],),
    CommandName.SCARD: lambda args: (args[1],),
    CommandName.SDIFF: lambda args: args[1 : (len(args))],
    CommandName.SDIFFSTORE: lambda args: args[2 : (len(args))],
    CommandName.SINTER: lambda args: args[1 : (len(args))],
    CommandName.SINTERCARD: lambda args: args[2 : 2 + int(args[1])],
    CommandName.SINTERSTORE: lambda args: args[2 : (len(args))],
    CommandName.SISMEMBER: lambda args: (args[1],),
    CommandName.SMEMBERS: lambda args: (args[1],),
    CommandName.SMISMEMBER: lambda args: (args[1],),
    CommandName.SORT: lambda args: (args[1],),
    CommandName.SORT_RO: lambda args: (args[1],),
    CommandName.SRANDMEMBER: lambda args: (args[1],),
    CommandName.SSCAN: lambda args: (args[1],),
    CommandName.STRLEN: lambda args: (args[1],),
    CommandName.SUBSTR: lambda args: (args[1],),
    CommandName.SUNION: lambda args: args[1 : (len(args))],
    CommandName.SUNIONSTORE: lambda args: args[2 : (len(args))],
    CommandName.TOUCH: lambda args: args[1 : (len(args))],
    CommandName.TTL: lambda args: (args[1],),
    CommandName.TYPE: lambda args: (args[1],),
    CommandName.XINFO_CONSUMERS: lambda args: (args[1],),
    CommandName.XINFO_GROUPS: lambda args: (args[1],),
    CommandName.XINFO_STREAM: lambda args: (args[1],),
    CommandName.XLEN: lambda args: (args[1],),
    CommandName.XPENDING: lambda args: (args[1],),
    CommandName.XRANGE: lambda args: (args[1],),
    CommandName.XREAD: lambda args: args[
        1
        + 1
        + args[1:].index(PrefixToken.STREAMS) : len(args)
        - ((len(args) - (args[1:].index(PrefixToken.STREAMS) + 1 + 1)) // 2)
    ],
    CommandName.XREADGROUP: lambda args: args[
        1
        + 4
        + args[4:].index(PrefixToken.STREAMS) : len(args)
        - ((len(args) - (args[4:].index(PrefixToken.STREAMS) + 4 + 1)) // 2)
    ],
    CommandName.XREVRANGE: lambda args: (args[1],),
    CommandName.ZCARD: lambda args: (args[1],),
    CommandName.ZCOUNT: lambda args: (args[1],),
    CommandName.ZDIFF: lambda args: args[2 : 2 + int(args[1])],
    CommandName.ZDIFFSTORE: lambda args: args[3 : 3 + int(args[2])],
    CommandName.ZINTER: lambda args: args[2 : 2 + int(args[1])],
    CommandName.ZINTERCARD: lambda args: args[2 : 2 + int(args[1])],
    CommandName.ZINTERSTORE: lambda args: args[3 : 3 + int(args[2])],
    CommandName.ZLEXCOUNT: lambda args: (args[1],),
    CommandName.ZMSCORE: lambda args: (args[1],),
    CommandName.ZRANDMEMBER: lambda args: (args[1],),
    CommandName.ZRANGE: lambda args: (args[1],),
    CommandName.ZRANGEBYLEX: lambda args: (args[1],),
    CommandName.ZRANGEBYSCORE: lambda args: (args[1],),
    CommandName.ZRANGESTORE: lambda args: (args[2],),
    CommandName.ZRANK: lambda args: (args[1],),
    CommandName.ZREVRANGE: lambda args: (args[1],),
    CommandName.ZREVRANGEBYLEX: lambda args: (args[1],),
    CommandName.ZREVRANGEBYSCORE: lambda args: (args[1],),
    CommandName.ZREVRANK: lambda args: (args[1],),
    CommandName.ZSCAN: lambda args: (args[1],),
    CommandName.ZSCORE: lambda args: (args[1],),
    CommandName.ZUNION: lambda args: args[2 : 2 + int(args[1])],
    CommandName.ZUNIONSTORE: lambda args: args[3 : 3 + int(args[2])],
}
ALL = {
    CommandName.APPEND: lambda args: (args[1],),
    CommandName.BITFIELD: lambda args: (args[1],),
    CommandName.BLMOVE: lambda args: (args[1],) + (args[2],),
    CommandName.BLMPOP: lambda args: args[3 : 3 + int(args[2])],
    CommandName.BLPOP: lambda args: args[1 : (len(args) - 1)],
    CommandName.BRPOP: lambda args: args[1 : (len(args) - 1)],
    CommandName.BRPOPLPUSH: lambda args: (args[1],) + (args[2],),
    CommandName.BZMPOP: lambda args: args[3 : 3 + int(args[2])],
    CommandName.BZPOPMAX: lambda args: args[1 : (len(args) - 1)],
    CommandName.BZPOPMIN: lambda args: args[1 : (len(args) - 1)],
    CommandName.DECR: lambda args: (args[1],),
    CommandName.DECRBY: lambda args: (args[1],),
    CommandName.EVAL: lambda args: args[3 : 3 + int(args[2])],
    CommandName.EVALSHA: lambda args: args[3 : 3 + int(args[2])],
    CommandName.EXPIRE: lambda args: (args[1],),
    CommandName.EXPIREAT: lambda args: (args[1],),
    CommandName.FCALL: lambda args: args[3 : 3 + int(args[2])],
    CommandName.GEOADD: lambda args: (args[1],),
    CommandName.GETDEL: lambda args: (args[1],),
    CommandName.GETEX: lambda args: (args[1],),
    CommandName.GETSET: lambda args: (args[1],),
    CommandName.HDEL: lambda args: (args[1],),
    CommandName.HINCRBY: lambda args: (args[1],),
    CommandName.HINCRBYFLOAT: lambda args: (args[1],),
    CommandName.HMSET: lambda args: (args[1],),
    CommandName.HSET: lambda args: (args[1],),
    CommandName.HSETNX: lambda args: (args[1],),
    CommandName.INCR: lambda args: (args[1],),
    CommandName.INCRBY: lambda args: (args[1],),
    CommandName.INCRBYFLOAT: lambda args: (args[1],),
    CommandName.LINSERT: lambda args: (args[1],),
    CommandName.LMOVE: lambda args: (args[1],) + (args[2],),
    CommandName.LMPOP: lambda args: args[2 : 2 + int(args[1])],
    CommandName.LPOP: lambda args: (args[1],),
    CommandName.LPUSH: lambda args: (args[1],),
    CommandName.LPUSHX: lambda args: (args[1],),
    CommandName.LREM: lambda args: (args[1],),
    CommandName.LSET: lambda args: (args[1],),
    CommandName.LTRIM: lambda args: (args[1],),
    CommandName.MIGRATE: lambda args: (args[3],)
    + args[1 + -2 + args[-2:].index(PrefixToken.KEYS) : len(args)],
    CommandName.MOVE: lambda args: (args[1],),
    CommandName.PERSIST: lambda args: (args[1],),
    CommandName.PEXPIRE: lambda args: (args[1],),
    CommandName.PEXPIREAT: lambda args: (args[1],),
    CommandName.PFADD: lambda args: (args[1],),
    CommandName.PFCOUNT: lambda args: args[1 : (len(args))],
    CommandName.PFDEBUG: lambda args: (args[2],),
    CommandName.PFMERGE: lambda args: (args[1],) + args[2 : (len(args))],
    CommandName.RENAME: lambda args: (args[1],) + (args[2],),
    CommandName.RENAMENX: lambda args: (args[1],) + (args[2],),
    CommandName.RPOP: lambda args: (args[1],),
    CommandName.RPOPLPUSH: lambda args: (args[1],) + (args[2],),
    CommandName.RPUSH: lambda args: (args[1],),
    CommandName.RPUSHX: lambda args: (args[1],),
    CommandName.SADD: lambda args: (args[1],),
    CommandName.SET: lambda args: (args[1],),
    CommandName.SETBIT: lambda args: (args[1],),
    CommandName.SETRANGE: lambda args: (args[1],),
    CommandName.SINTERSTORE: lambda args: (args[1],) + args[2 : (len(args))],
    CommandName.SMOVE: lambda args: (args[1],) + (args[2],),
    CommandName.SPOP: lambda args: (args[1],),
    CommandName.SREM: lambda args: (args[1],),
    CommandName.XACK: lambda args: (args[1],),
    CommandName.XADD: lambda args: (args[1],),
    CommandName.XAUTOCLAIM: lambda args: (args[1],),
    CommandName.XCLAIM: lambda args: (args[1],),
    CommandName.XDEL: lambda args: (args[1],),
    CommandName.XGROUP_CREATE: lambda args: (args[1],),
    CommandName.XGROUP_CREATECONSUMER: lambda args: (args[1],),
    CommandName.XGROUP_DELCONSUMER: lambda args: (args[1],),
    CommandName.XGROUP_DESTROY: lambda args: (args[1],),
    CommandName.XGROUP_SETID: lambda args: (args[1],),
    CommandName.XSETID: lambda args: (args[1],),
    CommandName.XTRIM: lambda args: (args[1],),
    CommandName.ZADD: lambda args: (args[1],),
    CommandName.ZINCRBY: lambda args: (args[1],),
    CommandName.ZMPOP: lambda args: args[2 : 2 + int(args[1])],
    CommandName.ZPOPMAX: lambda args: (args[1],),
    CommandName.ZPOPMIN: lambda args: (args[1],),
    CommandName.ZREM: lambda args: (args[1],),
    CommandName.ZREMRANGEBYLEX: lambda args: (args[1],),
    CommandName.ZREMRANGEBYRANK: lambda args: (args[1],),
    CommandName.ZREMRANGEBYSCORE: lambda args: (args[1],),
    CommandName.BITCOUNT: lambda args: (args[1],),
    CommandName.BITFIELD_RO: lambda args: (args[1],),
    CommandName.BITOP: lambda args: args[3 : (len(args))] + (args[2],),
    CommandName.BITPOS: lambda args: (args[1],),
    CommandName.COPY: lambda args: (args[1],) + (args[2],),
    CommandName.DUMP: lambda args: (args[1],),
    CommandName.EVALSHA_RO: lambda args: args[3 : 3 + int(args[2])],
    CommandName.EVAL_RO: lambda args: args[3 : 3 + int(args[2])],
    CommandName.EXISTS: lambda args: args[1 : (len(args))],
    CommandName.EXPIRETIME: lambda args: (args[1],),
    CommandName.FCALL_RO: lambda args: args[3 : 3 + int(args[2])],
    CommandName.GEODIST: lambda args: (args[1],),
    CommandName.GEOHASH: lambda args: (args[1],),
    CommandName.GEOPOS: lambda args: (args[1],),
    CommandName.GEORADIUS: lambda args: (args[1],)
    + args[1 + 6 + args[6:].index(PrefixToken.STORE)]
    + args[1 + 6 + args[6:].index(PrefixToken.STOREDIST)],
    CommandName.GEORADIUSBYMEMBER: lambda args: (args[1],)
    + args[1 + 5 + args[5:].index(PrefixToken.STORE)]
    + args[1 + 5 + args[5:].index(PrefixToken.STOREDIST)],
    CommandName.GEORADIUSBYMEMBER_RO: lambda args: (args[1],),
    CommandName.GEORADIUS_RO: lambda args: (args[1],),
    CommandName.GEOSEARCH: lambda args: (args[1],),
    CommandName.GEOSEARCHSTORE: lambda args: (args[2],) + (args[1],),
    CommandName.GET: lambda args: (args[1],),
    CommandName.GETBIT: lambda args: (args[1],),
    CommandName.GETRANGE: lambda args: (args[1],),
    CommandName.HEXISTS: lambda args: (args[1],),
    CommandName.HGET: lambda args: (args[1],),
    CommandName.HGETALL: lambda args: (args[1],),
    CommandName.HKEYS: lambda args: (args[1],),
    CommandName.HLEN: lambda args: (args[1],),
    CommandName.HMGET: lambda args: (args[1],),
    CommandName.HRANDFIELD: lambda args: (args[1],),
    CommandName.HSCAN: lambda args: (args[1],),
    CommandName.HSTRLEN: lambda args: (args[1],),
    CommandName.HVALS: lambda args: (args[1],),
    CommandName.LCS: lambda args: args[1:2],
    CommandName.LINDEX: lambda args: (args[1],),
    CommandName.LLEN: lambda args: (args[1],),
    CommandName.LPOS: lambda args: (args[1],),
    CommandName.LRANGE: lambda args: (args[1],),
    CommandName.MEMORY_USAGE: lambda args: (args[1],),
    CommandName.MGET: lambda args: args[1 : (len(args))],
    CommandName.OBJECT_ENCODING: lambda args: (args[1],),
    CommandName.OBJECT_FREQ: lambda args: (args[1],),
    CommandName.OBJECT_IDLETIME: lambda args: (args[1],),
    CommandName.OBJECT_REFCOUNT: lambda args: (args[1],),
    CommandName.PEXPIRETIME: lambda args: (args[1],),
    CommandName.PTTL: lambda args: (args[1],),
    CommandName.SCARD: lambda args: (args[1],),
    CommandName.SDIFF: lambda args: args[1 : (len(args))],
    CommandName.SDIFFSTORE: lambda args: args[2 : (len(args))] + (args[1],),
    CommandName.SINTER: lambda args: args[1 : (len(args))],
    CommandName.SINTERCARD: lambda args: args[2 : 2 + int(args[1])],
    CommandName.SISMEMBER: lambda args: (args[1],),
    CommandName.SMEMBERS: lambda args: (args[1],),
    CommandName.SMISMEMBER: lambda args: (args[1],),
    CommandName.SORT: lambda args: (args[1],),
    CommandName.SORT_RO: lambda args: (args[1],),
    CommandName.SRANDMEMBER: lambda args: (args[1],),
    CommandName.SSCAN: lambda args: (args[1],),
    CommandName.STRLEN: lambda args: (args[1],),
    CommandName.SUBSTR: lambda args: (args[1],),
    CommandName.SUNION: lambda args: args[1 : (len(args))],
    CommandName.SUNIONSTORE: lambda args: args[2 : (len(args))] + (args[1],),
    CommandName.TOUCH: lambda args: args[1 : (len(args))],
    CommandName.TTL: lambda args: (args[1],),
    CommandName.TYPE: lambda args: (args[1],),
    CommandName.XINFO_CONSUMERS: lambda args: (args[1],),
    CommandName.XINFO_GROUPS: lambda args: (args[1],),
    CommandName.XINFO_STREAM: lambda args: (args[1],),
    CommandName.XLEN: lambda args: (args[1],),
    CommandName.XPENDING: lambda args: (args[1],),
    CommandName.XRANGE: lambda args: (args[1],),
    CommandName.XREAD: lambda args: args[
        1
        + 1
        + args[1:].index(PrefixToken.STREAMS) : len(args)
        - ((len(args) - (args[1:].index(PrefixToken.STREAMS) + 1 + 1)) // 2)
    ],
    CommandName.XREADGROUP: lambda args: args[
        1
        + 4
        + args[4:].index(PrefixToken.STREAMS) : len(args)
        - ((len(args) - (args[4:].index(PrefixToken.STREAMS) + 4 + 1)) // 2)
    ],
    CommandName.XREVRANGE: lambda args: (args[1],),
    CommandName.ZCARD: lambda args: (args[1],),
    CommandName.ZCOUNT: lambda args: (args[1],),
    CommandName.ZDIFF: lambda args: args[2 : 2 + int(args[1])],
    CommandName.ZDIFFSTORE: lambda args: args[3 : 3 + int(args[2])] + (args[1],),
    CommandName.ZINTER: lambda args: args[2 : 2 + int(args[1])],
    CommandName.ZINTERCARD: lambda args: args[2 : 2 + int(args[1])],
    CommandName.ZINTERSTORE: lambda args: args[3 : 3 + int(args[2])] + (args[1],),
    CommandName.ZLEXCOUNT: lambda args: (args[1],),
    CommandName.ZMSCORE: lambda args: (args[1],),
    CommandName.ZRANDMEMBER: lambda args: (args[1],),
    CommandName.ZRANGE: lambda args: (args[1],),
    CommandName.ZRANGEBYLEX: lambda args: (args[1],),
    CommandName.ZRANGEBYSCORE: lambda args: (args[1],),
    CommandName.ZRANGESTORE: lambda args: (args[2],) + (args[1],),
    CommandName.ZRANK: lambda args: (args[1],),
    CommandName.ZREVRANGE: lambda args: (args[1],),
    CommandName.ZREVRANGEBYLEX: lambda args: (args[1],),
    CommandName.ZREVRANGEBYSCORE: lambda args: (args[1],),
    CommandName.ZREVRANK: lambda args: (args[1],),
    CommandName.ZSCAN: lambda args: (args[1],),
    CommandName.ZSCORE: lambda args: (args[1],),
    CommandName.ZUNION: lambda args: args[2 : 2 + int(args[1])],
    CommandName.ZUNIONSTORE: lambda args: args[3 : 3 + int(args[2])] + (args[1],),
    CommandName.MSET: lambda args: args[1 : (len(args)) : 2],
    CommandName.MSETNX: lambda args: args[1 : (len(args)) : 2],
    CommandName.PSETEX: lambda args: (args[1],),
    CommandName.RESTORE: lambda args: (args[1],),
    CommandName.RESTORE_ASKING: lambda args: (args[1],),
    CommandName.SETEX: lambda args: (args[1],),
    CommandName.SETNX: lambda args: (args[1],),
    CommandName.DEL: lambda args: args[1 : (len(args))],
    CommandName.SPUBLISH: lambda args: (args[1],),
    CommandName.SSUBSCRIBE: lambda args: args[1 : (len(args))],
    CommandName.SUNSUBSCRIBE: lambda args: args[1 : (len(args))],
    CommandName.UNLINK: lambda args: args[1 : (len(args))],
    CommandName.WATCH: lambda args: args[1 : (len(args))],
}


def extract_keys(
    arguments: Tuple[ValueT, ...], readonly_command=False
) -> Tuple[ValueT, ...]:
    if len(arguments) <= 1:
        return ()

    assert isinstance(arguments[0], CommandName)

    command = arguments[0]

    if readonly_command:
        return READONLY[command](arguments)
    else:
        return ALL[command](arguments)
