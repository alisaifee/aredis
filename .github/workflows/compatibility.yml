name: Compatibility

on:
  create:
    tags: ['*']
  push:
    branches: ['master']
  schedule:
  - cron: 0 23 * * *

jobs:
  lint:
    name: Lint (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]
    steps:
    - uses: actions/checkout@v2
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/**') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements/dev.txt
        python setup.py build
    - name: Lint with flake8
      run: |
        flake8 coredis tests --count --show-source --statistics
        flake8 coredis tests --count --exit-zero --max-complexity=10
    - name: Lint with black
      run: |
        black --check coredis tests
    - name: Check imports
      run: |
        isort -c --profile=black coredis tests
    - name: Check types
      run: |
        pyright coredis
        mypy coredis
    - name: Check auto generated sources
      run: |
        make templated-sources
        if [ ! -z "$(git diff coredis)" ];
        then
          echo "Auto-generated source are not up to date"
          git diff
          exit 1
        fi;
  test:
    name: Test (Python ${{ matrix.python-version }}, Redis ${{ matrix.redis-version }}${{ matrix.uvloop == 'True' && ', uvloop' || ''}}${{ matrix.extensions == 'True' && ', compiled' || ''}}${{ matrix.label && format(', {0}', matrix.label) || '' }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9, "3.10"]
        redis-version: ["6.0", "6.2", "7.0", "latest"]
        test_params: ["-m '(not (keydb or dragonfly))'"]
        uvloop: ["True", "False"]
        runtime_type_checks: ["True"]
        extensions: ["True"]
        label: [""]
        include:
          - python-version: "3.10"
            redis-version: latest
            test_params: "-m '(not (keydb or dragonfly))'"
            runtime_type_checks: "True"
            label: ""
          - python-version: "3.10"
            redis-version: 7.0
            test_params: "-m '(not (keydb or dragonfly))'"
            runtime_type_checks: "False"
            label: ""
          - python-version: "3.10"
            redis-version: 7.0
            test_params: "-m keydb"
            runtime_type_checks: "False"
            label: "KeyDB"
          - python-version: "3.10"
            redis-version: 7.0
            test_params: "-m dragonfly"
            runtime_type_checks: "False"
            extensions: "False"
            label: "Dragonfly"
          - python-version: "pypy-3.7"
            redis-version: 7.0
            test_params: "-m '(not (keydb or dragonfly))' tests/commands tests/test_tracking_cache.py"
            runtime_type_checks: "False"
            extensions: "False"
            uvloop: "False"
            label: ""
          - python-version: "pypy-3.8"
            redis-version: 7.0
            test_params: "-m '(not (keydb or dragonfly))' tests/commands tests/test_tracking_cache.py"
            runtime_type_checks: "False"
            extensions: "False"
            uvloop: "False"
            label: ""
          - python-version: "pypy-3.9"
            redis-version: 7.0
            test_params: "-m '(not (keydb or dragonfly))' tests/commands tests/test_tracking_cache.py"
            runtime_type_checks: "False"
            extensions: "False"
            uvloop: "False"
            label: ""
    steps:
    - uses: actions/checkout@v3
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements/**') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements/dev.txt
        python setup.py build
    - name: Compile extensions
      if: ${{ matrix.extensions == 'True' }}
      run: python setup.py build_ext --inplace
    - name: Install uvloop
      if: ${{ matrix.uvloop == 'True' }}
      run:
        pip install uvloop
    - name: Tests with coverage
      env:
        COREDIS_UVLOOP: ${{ matrix.uvloop }}
        HOST_OS: linux
        CI: "True"
        COREDIS_REDIS_VERSION: ${{matrix.redis-version}}
        COREDIS_RUNTIME_CHECKS: ${{matrix.runtime_type_checks}}
      run: |
        echo "Runtime checks: $COREDIS_RUNTIME_CHECKS"
        echo "UVLoop: $COREDIS_UVLOOP"
        echo "CI: $CI"
        pytest --reverse --cov=coredis --cov-report=xml ${{ matrix.test_params }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      if: ${{ matrix.coverage == 'True' }}
  build_wheels:
    needs: [lint]
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build wheels (All Architectures)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: pypa/cibuildwheel@v2.6.0
        env:
          CIBW_SKIP: '*musllinux* pp*'
          CIBW_BEFORE_BUILD: 'pip install -r requirements/build_ext.txt'
          CIBW_ARCHS_MACOS: all
      - name: Build wheels (Default Architectures)
        if: github.ref == 'refs/heads/master'
        uses: pypa/cibuildwheel@v2.6.0
        env:
          CIBW_SKIP: '*musllinux* pp*'
          CIBW_BEFORE_BUILD: 'pip install -r requirements/build_ext.txt'
      - name: Build wheels (Minimal)
        if: github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')
        uses: pypa/cibuildwheel@v2.6.0
        env:
          CIBW_SKIP: '*musllinux* pp*'
          CIBW_BEFORE_BUILD: 'pip install -r requirements/build_ext.txt'
      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
  build_sdist:
    needs: [lint]
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build sdist
        run: |
          pipx run build --sdist
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz
