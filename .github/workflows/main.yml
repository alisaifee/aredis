name: CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]
    steps:
    - uses: actions/checkout@v2
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/**') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements/dev.txt
        python setup.py build
    - name: Lint with flake8
      run: |
        flake8 coredis tests --count --show-source --statistics
        flake8 coredis tests --count --exit-zero --max-complexity=10
    - name: Lint with black
      run: |
        black coredis tests
    - name: Check imports
      run: |
        isort -c --profile=black coredis tests
    - name: Check types
      run: |
        pyright coredis
        mypy coredis
    - name: Check auto generated sources
      run: |
        make templated-sources
        if [ ! -z "$(git diff coredis)" ];
        then
          echo "Auto-generated source are not up to date"
          git diff
          exit 1
        fi;
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #python-version: [3.8, 3.9, "3.10", "3.11.0-beta.1"]
        python-version: [3.8, 3.9, "3.10"]
        service_version:
          - REDIS_VERSION=6.0.16 REDIS_SENTINEL_VERSION=6.0.16 REDIS_SSL_VERSION=6.0.16
          - REDIS_VERSION=6.2.6 REDIS_SSL_VERSION=6.2.6 REDIS_SENTINEL_VERSION=6.2.6 REDIS_STACK_VERSION=6.2.0-edge
          - REDIS_VERSION=7.0.0 REDIS_SSL_VERSION=7.0.0 REDIS_STACK_VERSION=7.0.0-RC4
        parser: [hiredis, python]
        test_params: ["-m '(not keydb)'"]
        uvloop: ["True", "False"]
        runtime_type_checks: ["True"]
        include:
          - python-version: "3.10"
            service_version: "REDIS_VERSION=latest REDIS_SSL_VERSION=latest"
            parser: python
            test_params: "-m '(not keydb)'"
            runtime_type_checks: "False"
          - python-version: "3.10"
            service_version: "REDIS_VERSION=latest REDIS_SSL_VERSION=latest"
            parser: python
            test_params: "-m keydb"
            runtime_type_checks: "False"
    steps:
    - uses: actions/checkout@v3
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements/**') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements/dev.txt
        pip uninstall hiredis -y
        python setup.py build
    - name: Install Hiredis
      if: ${{ matrix.parser == 'hiredis' }}
      run:
        pip install hiredis
    - name: Install uvloop
      if: ${{ matrix.uvloop == 'True' }}
      run:
        pip install uvloop
    - name: Tests
      env:
        COREDIS_UVLOOP: ${{ matrix.uvloop }}
        HOST_OS: linux
        CI: "True"
        COREDIS_RUNTIME_CHECKS: ${{matrix.runtime_type_checks}}
      run: |
        eval "export ${{ matrix.service_version }}"
        echo "Runtime checks: $COREDIS_RUNTIME_CHECKS"
        echo "UVLoop: $COREDIS_UVLOOP"
        echo "CI: $CI"
        pytest --cov-report=xml --cov-branch ${{ matrix.test_params }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
  build_wheels:
    needs: [lint]
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.4.0
        env:
          CIBW_SKIP: '*musllinux* pp*'
      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
  build_sdist:
    needs: [lint]
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build sdist
        run: |
          pipx run build --sdist
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz
  upload_pypi:
    needs: [test, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
  upload_pypi_release:
    needs: [test, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  github_release:
    needs: [upload_pypi_release]
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - name: Generate release notes
        run: |
          ./scripts/github_release_notes.sh > release_notes.md
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          bodyFile: release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}

